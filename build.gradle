
buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }

        // 或者jcenter()

    }
    dependencies {

        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.10.1'
    }
}
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id("org.jetbrains.dokka") version "1.4.10.2"
    //id("org.jetbrains.dokka") version "1.4.0-rc"

    //id 'dokka-gradle-plugin' version '0.10.1'

    //id("org.jetbrains.dokka") version "1.4.0-rc"
}


group 'org.example'
version '1.0-SNAPSHOT'
apply plugin: 'java'

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'idea'
dependencies {
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.4.10.2")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

/*dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/dokka"

    configuration {
        // Do not output deprecated members
        skipDeprecated = true
        // Emit warnings about not documented members.
        reportUndocumented = true
        // Do not create index pages for empty packages
        skipEmptyPackages = true

        noJdkLink = true
        noStdlibLink = true
        noAndroidSdkLink = true
    }
}*/
javadoc{
    destinationDir=new File(projectDir.toString()+"\\doc")
}
repositories {
    maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://maven.aliyun.com/repository/jcenter'}
    maven {url 'https://dl.bintray.com/kotlin/dokka'}
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }

    maven{url "https://maven.pkg.jetbrains.space/kotlin/p/dokka/dev"}
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }  //转换pdf使用
    mavenLocal()
    mavenCentral()
    jcenter()
}
//apply plugin: 'org.jetbrains.dokka'


/*task generateSourcesJar(type: Jar) {
    group = 'jar'
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = new File(projectDir.toString()+"\\doc")
}

task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from new File(projectDir.toString()+"\\doc")
}

artifacts {
    archives generateJavadoc
    archives generateSourcesJar
}
*/
group 'org.example'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }

}

dependencies {
    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.4.10.2")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation("io.netty:netty-all:4.1.47.Final")
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile fileTree(dir:'libs',includes:['*.yml'])
    //compile files("libs/bukkit.jar")
    compile files("libs/spigot-1.12.2.jar")

}
task 'shadowAll' {

}
tasks.dokkaHtml {
    dokkaSourceSets {
        named("main") {
            //moduleDisplayName.set("CXPluginLibrary")
            includes.from("Module.md")
            exclude 'plugin.yml'
        }
    }}



task 'shadowLibs' {
    doFirst{
        shadowJar.destinationDir=new File(projectDir.toString()+"/libs")
    }



}
dokkaHtml{

}
task 'kotlinDoc'{
    dependsOn("dokkaHtml")
    //dependsOn("dokkaJavadoc")
    doFirst {

    }
}
task 'shadowProject' {
    doFirst{
        shadowJar.destinationDir=new File(projectDir.toString())
    }
}
task 'shadowServer'{

    doFirst{
        shadowJar.destinationDir=new File(' F:\\生存服务器\\生存服务器\\plugins')
    }
}
shadowJar {
    baseName = 'CXFundamental'
    classifier = null
    version = '1.0.0'
    destinationDir= new File(projectDir.toString()+"\\libs")
    dependencies {
        exclude 'spigot-1.12.2.jar'
    }
}


compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

/*task 'createKotlinProject'  {
    doLast {
        sourceSets*.kotlin.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}*/
task 'create-dirs' {
    doLast {
        sourceSets*.java.srcDirs*.each {

            it.mkdirs()
        }
        sourceSets*.resources.srcDirs*.each {
            it.mkdirs()
        }
    }
}
